Score extractor function:
  Get model-implied S and mean parameters from model output.
    - Problem: Need to say how each parameter impacts
      the model-implied S.  Also need to get mean parameters.
  Need to say which parameters you want to test.
  Function extracts scores for these parameters.
  

Notes on sem package:

  Note that C, A, P are sent to sem
  output.  C is model-implied cov matrix, A is RAM matrix, P is RAM 
  matrix.  Only problem is that the mean parameters are not
  estimated.  We might set these to the observed means.  We can
  also estimate a model with intercepts, but we need to figure out
  how we can get information about which parameters are intercepts.

  Can get info on model parameters and their locations using objects
  returned with the estimated model (ram,J,A,P)

  Model-implied S can be obtained via the following, assuming
  res contains the estimated model:

  # Covariances between all variables (latent & observed):
  covmat <- with(res, solve(diag(nrow(A)) - A) %*% P %*% t(solve(diag(nrow(A)) - A)))
  # Covariances between just observed variables (utilizes
  # covmat from previous command):
  covmat <- with(res, J %*% covmat %*% t(J))

  Locations of model parameters:
  par.posn object lists rows of ram object that have free parameters
  ram object "heads" column says whether parameter is in A matrix
  or P matrix (1=A, 2=P).  "to" and "from" columns say specific
  row/column (respectively) that each parameter goes into.

Notes on lavaan package:

  This apparently supports FIML for missing data.  It also supports
  multiple groups analysis and has a pre-defined command for
  measurement invariance.  So this seems better than the sem
  package.

  Can potentially obtain info about the estimated model via
  inspect(lavaan.res, "free")  # location of free parameters
  inspect(lavaan.res, "coef")  # values of free parameters
  Then just need to know how to get model-implied S and means out.

Notes on OpenMx:

  Could we somehow define a model with one observation and all
  parameters fixed to their estimates, then use mxEval?  The model
  gradient is then the scores that we need.  NO.
  But it returns various RAM matrices with the output, parameter
  names included.  Can call various parameters via:
  tmpmat <- mxres$M
  tmpmat@values[tmpmat@labels=="meanx1"]

  So first extract vector of parameter estimates, then insert these
  in a function to get numeric derivatives.



